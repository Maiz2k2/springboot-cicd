name: CI/CD Pipeline

on:
  workflow_run:
    workflows: ["Dockerize and Push to ECR"]
    types:
      - completed

jobs:
  trivy-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Ensure Docker is Installed
        run: |
          if ! command -v docker &> /dev/null; then
            echo "Docker not found! Installing..."
            sudo apt-get update
            sudo apt-get install -y docker.io
          else
            echo "Docker is already installed."
          fi
          docker --version

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull Docker Image
        run: |
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/springboot-app/springboot-cicd:latest

      - name: Install Trivy
        run: |
          sudo apt-get install -y wget gnupg
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb generic main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
          trivy --version

      - name: Run Trivy Image Scan
        run: |
          trivy image ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/springboot-app/springboot-cicd:latest --exit-code 1 --severity HIGH,CRITICAL

  deploy-eks:
    runs-on: ubuntu-latest
    needs: trivy-scan  # This ensures deploy-eks runs only after trivy-scan succeeds

    steps:
      - name: Checkout Helm Charts
        uses: actions/checkout@v3
        with:
          repository: Maiz2k2/springboot-helm
          path: helm
          token: ${{ secrets.GIT_TOKEN }}

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client

      - name: Configure kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name spring-cluster --region ${{ secrets.AWS_REGION }}

      - name: Deploy to EKS
        run: |
          helm upgrade --install hello-world ./helm/hello-world \
            --set image.repository=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/springboot-app/springboot-cicd \
            --set image.tag=latest \
            --set imagePullSecrets[0].name=ecr-secret
####
